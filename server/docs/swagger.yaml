definitions:
  error.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  middleware.ValidTokenResponse:
    properties:
      exp:
        type: string
    type: object
  models.Bid:
    properties:
      amount:
        type: number
      mesage:
        type: string
      product_id:
        type: string
    type: object
  models.CartItems:
    properties:
      products:
        items:
          type: string
        type: array
    type: object
  models.CreateBidResponse:
    properties:
      bid_id:
        type: string
    type: object
  models.Product:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_images:
        items:
          $ref: '#/definitions/models.ProductImage'
        type: array
    type: object
  models.ProductImage:
    properties:
      base_64_image:
        type: string
      checksum:
        type: string
      compressedImage:
        items:
          type: integer
        type: array
      order:
        type: integer
    type: object
  models.SellItemViaBid:
    properties:
      bid_id:
        type: string
      item_id:
        type: string
    type: object
  models.UpdateProduct:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.UserDetails:
    properties:
      email:
        type: string
      id:
        type: string
      profile_image_link:
        type: string
      username:
        type: string
    type: object
  transport.AccessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  transport.CreateListingResponse:
    properties:
      product_id:
        type: string
    type: object
host: api.luxoras.nl
info:
  contact: {}
  description: Luxora is a secure, modern backend API for managing listings, bids,
    and authentication with OAuth2 providers. This API powers the Luxora marketplace
    platform, enabling seamless user authentication, listing management, and bidding
    workflows.
  title: Luxora Marketplace API
  version: 1.2.1
paths:
  /auth/github:
    get:
      consumes:
      - '*/*'
      description: redirect to Github for Oauth authentication.
      responses: {}
      summary: Github Oauth redirect
      tags:
      - auth
  /auth/github/exchange:
    get:
      consumes:
      - '*/*'
      description: Send a request to this endpoint to exchange the Github code you
        got from Github for an access token.
      parameters:
      - description: code
        format: code
        in: query
        name: code
        required: true
        type: string
      - description: state
        format: state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token response
          schema:
            $ref: '#/definitions/transport.AccessTokenResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Github Oauth exchange
      tags:
      - auth
  /auth/google:
    get:
      consumes:
      - '*/*'
      description: redirect to Google for Oauth authentication.
      responses: {}
      summary: Google Oauth redirect
      tags:
      - auth
  /auth/google/exchange:
    get:
      consumes:
      - '*/*'
      description: Send a request to this endpoint to exchange the Google code you
        got from Google for an access token.
      parameters:
      - description: code
        format: code
        in: query
        name: code
        required: true
        type: string
      - description: state
        format: state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token response
          schema:
            $ref: '#/definitions/transport.AccessTokenResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Google Oauth exchange
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - '*/*'
      description: Logs out the authenticated user and invalidates their tokens
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - '*/*'
      description: Refresh the access token using the refresh token stored in the
        cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Access token response
          schema:
            $ref: '#/definitions/transport.AccessTokenResponse'
        "400":
          description: Missing cookie error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Refresh Token
      tags:
      - auth
  /auth/userinfo:
    get:
      consumes:
      - '*/*'
      description: Retrieves the authenticated user's profile information.
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile details
          schema:
            $ref: '#/definitions/models.UserDetails'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Get user info
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verifies the provided access token and returns its expiry if valid.
      parameters:
      - description: Access token to verify
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid and expiry is returned
          schema:
            $ref: '#/definitions/middleware.ValidTokenResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Verify access token
      tags:
      - auth
  /listings:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of product listings for the authenticated
        user. Supports optional filtering by category and price range.
      parameters:
      - description: Number of listings per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Page number to retrieve
        in: query
        name: page
        required: true
        type: integer
      - description: Category to filter listings
        in: query
        name: category
        type: string
      - description: Minimum price filter
        in: query
        name: startprice
        type: string
      - description: search query
        in: query
        name: searchquery
        type: string
      - description: Maximum price filter
        in: query
        name: endprice
        type: string
      - description: the person who created the listing
        in: query
        name: creator
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of product listings
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad request - missing or invalid parameters
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Get product listings
      tags:
      - listings
    patch:
      consumes:
      - application/json
      description: This endpoint allows users to update their product listings. The
        request body must contain the update details in JSON format.
      parameters:
      - description: Product update details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProduct'
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            type: string
        "422":
          description: Unprocessable entity - invalid JSON payload
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Update a product listing
      tags:
      - listings
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create new product listings.
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Create listing response containing the product ID
          schema:
            $ref: '#/definitions/transport.CreateListingResponse'
        "422":
          description: Unprocessable entity - invalid JSON payload
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Create new listing
      tags:
      - listings
  /listings/:
    delete:
      consumes:
      - '*/*'
      description: This endpoint allows users to delete product listings.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: Listing deleted successfully
          schema:
            type: string
        "404":
          description: Product ID not found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Delete a listing
      tags:
      - listings
  /listings/bid:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create bids on product listings.
        The request body must contain the bid details in JSON format.
      parameters:
      - description: Bid details
        in: body
        name: bid
        required: true
        schema:
          $ref: '#/definitions/models.Bid'
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Bid created successfully with the bid ID
          schema:
            $ref: '#/definitions/models.CreateBidResponse'
        "400":
          description: Bad request - invalid input or missing fields
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "422":
          description: Unprocessable entity - failed to decode JSON payload
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Create a bid
      tags:
      - bidding
  /listings/bids:
    get:
      consumes:
      - '*/*'
      description: Retrieves a paginated list of bids for a specific product listing.
        The product ID, limit, and page number must be provided as query parameters.
      parameters:
      - description: The unique identifier of the product listing
        in: query
        name: productid
        required: true
        type: string
      - description: The maximum number of bids to retrieve per page
        in: query
        name: limit
        required: true
        type: integer
      - description: The page number to retrieve
        in: query
        name: page
        required: true
        type: integer
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A list of bids for the specified product listing
          schema:
            items:
              $ref: '#/definitions/models.Bid'
            type: array
        "400":
          description: Bad request - invalid or missing query parameters
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not found - product ID not provided
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Get bids for a product listing
      tags:
      - bidding
  /listings/checkout:
    post:
      consumes:
      - application/json
      description: Processes the checkout for the authenticated user's cart. The request
        body must contain the cart items in JSON format.
      parameters:
      - description: Cart items to checkout
        in: body
        name: cartItems
        required: true
        schema:
          $ref: '#/definitions/models.CartItems'
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Checkout successful
          schema:
            type: string
        "422":
          description: Unprocessable entity - invalid JSON payload
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Checkout cart
      tags:
      - listings
  /listings/highest-bid:
    get:
      consumes:
      - '*/*'
      description: This endpoint retrieves the highest bid for a specific product
        listing. The product ID must be provided as a query parameter.
      parameters:
      - description: Product ID
        in: query
        name: productid
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Highest bid details
          schema:
            $ref: '#/definitions/models.Bid'
        "400":
          description: Bad request - invalid or missing product ID
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not found - product ID not provided
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Get highest bid
      tags:
      - bidding
  /listings/sold/bid:
    put:
      consumes:
      - application/json
      description: This endpoint updates the sold status of a product based on a successful
        bid. The request body must contain the bid details in JSON format.
      parameters:
      - description: Details of the bid used to mark the item as sold
        in: body
        name: bid
        required: true
        schema:
          $ref: '#/definitions/models.SellItemViaBid'
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item marked as sold successfully
          schema:
            type: string
        "422":
          description: Unprocessable entity - invalid JSON payload
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      summary: Update sold status via bid
      tags:
      - listings
  /ping:
    get:
      consumes:
      - '*/*'
      description: Endpoint to check if the server is running
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Healthcheck
      tags:
      - base
schemes:
- https
swagger: "2.0"
