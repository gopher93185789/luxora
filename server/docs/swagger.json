{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/github": {
            "get": {
                "description": "redirect to Github for Oauth authentication.",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Github Oauth redirect",
                "responses": {}
            }
        },
        "/auth/github/exchange": {
            "get": {
                "description": "Send a request to this endpoint to exchange the Google code you got from Google for an access token.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Google Oauth exchange",
                "parameters": [
                    {
                        "type": "string",
                        "format": "code",
                        "description": "code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "state",
                        "description": "state",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token response",
                        "schema": {
                            "$ref": "#/definitions/transport.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "redirect to Google for Oauth authentication.",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Google Oauth redirect",
                "responses": {}
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh the access token using the refresh token stored in the cookie.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh Token",
                "responses": {
                    "200": {
                        "description": "Access token response",
                        "schema": {
                            "$ref": "#/definitions/transport.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Missing cookie error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/listings/": {
            "post": {
                "description": "This endpoint allows users to create new product listings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "listings"
                ],
                "summary": "Create new listing",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create listing response containing the product ID",
                        "schema": {
                            "$ref": "#/definitions/transport.CreateListingResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity - invalid JSON payload",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint allows users to delete product listings.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "listings"
                ],
                "summary": "Delete a listing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listing deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product ID not found",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/error.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Endpoint to check if the server is running",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "base"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "pong",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "error.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "product_images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProductImage"
                    }
                }
            }
        },
        "models.ProductImage": {
            "type": "object",
            "properties": {
                "base_64_image": {
                    "type": "string"
                },
                "checksum": {
                    "type": "string"
                },
                "compressedImage": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "transport.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "transport.CreateListingResponse": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string"
                }
            }
        }
    }
}